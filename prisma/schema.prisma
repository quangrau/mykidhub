// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  SCHOOL_ADMIN
  TEACHER
  GUARDIAN
}

model User {
  id                String   @id @default(uuid())
  name              String?
  phone             String?
  email             String   @unique
  password          String?
  role              UserRole @default(TEACHER)
  emailVerified     Boolean  @default(false)
  verificationToken String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // School association (for staff/teachers)
  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id])

  // Relationships
  assignedClassrooms ClassroomStaff[]
  guardianOf         StudentGuardian[]
  Account            Account[]
}

model School {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  staff      User[]
  students   Student[]
  classrooms Classroom[]
}

model Classroom {
  id         String   @id @default(uuid())
  name       String
  gradeLevel String?
  status     Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  schoolId String
  school   School           @relation(fields: [schoolId], references: [id])
  staff    ClassroomStaff[]
  students Student[]
}

model Student {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  dob       DateTime?
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  schoolId    String
  school      School            @relation(fields: [schoolId], references: [id])
  classroomId String?
  classroom   Classroom?        @relation(fields: [classroomId], references: [id])
  guardians   StudentGuardian[]
}

model ClassroomStaff {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  assignedAt  DateTime  @default(now())

  @@id([userId, classroomId])
}

enum InvitationStatus {
  NOT_INVITED
  INVITED
  SIGNED_UP
}

enum GuardianRelation {
  PARENT
  FATHER
  MOTHER
  GRANDPARENT
  NANNY
  OTHER
}

model StudentGuardian {
  studentId    String
  student      Student          @relation(fields: [studentId], references: [id])
  guardianId   String
  guardian     User             @relation(fields: [guardianId], references: [id])
  status       InvitationStatus @default(NOT_INVITED)
  relationship GuardianRelation

  createdAt DateTime @default(now())

  @@id([studentId, guardianId])
}
