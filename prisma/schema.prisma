// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AccountRole {
  ADMIN
  SCHOOL_ADMIN
  TEACHER
  GUARDIAN
}

model Account {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  guardians     GuardianProfile[]
  staff         StaffProfile?     @relation("AccountToStaffProfile")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model School {
  id         String         @id @default(cuid())
  name       String
  slug       String         @unique
  adminEmail String
  phone      String?
  address    String?
  metadata   Json?          @default("{}") @db.JsonB
  capacity   Int?           @default(0)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @updatedAt
  classrooms Classroom[]
  students   Student[]
  staffs     StaffProfile[]
}

model StaffProfile {
  id         String      @id @default(cuid())
  name       String
  email      String
  phone      String?
  role       AccountRole @default(TEACHER)
  status     Int         @default(1)
  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId   String
  account    Account?    @relation("AccountToStaffProfile", fields: [accountId], references: [id])
  accountId  String?     @unique
  classrooms Classroom[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt

  @@unique([email, schoolId])
  @@index([email])
  @@index([status])
}

model Classroom {
  id        String         @id @default(cuid())
  name      String
  schoolId  String
  capacity  Int?
  status    Int            @default(1)
  school    School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students  Student[]
  staffs    StaffProfile[]
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model Student {
  id          String            @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  schoolId    String
  classroomId String
  school      School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classroom   Classroom         @relation(fields: [classroomId], references: [id])
  guardians   GuardianProfile[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
}

enum InvitationStatus {
  NOT_INVITED
  INVITED
  SIGNED_UP
}

model GuardianProfile {
  id           String           @id @default(cuid())
  studentId    String
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  guardian     Account          @relation(fields: [guardianId], references: [id])
  guardianId   String
  relationship String?
  status       InvitationStatus @default(NOT_INVITED)
  email        String?
  phone        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?        @updatedAt

  @@unique([guardianId, studentId])
  @@index([email])
  @@index([status])
}
