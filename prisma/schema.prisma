// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String            @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  staff         StaffProfile?     @relation("UserToStaffProfile")
  guardians     GuardianProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StaffRole {
  ADMIN
  SCHOOL_ADMIN
  TEACHER
  GUARDIAN
}

model School {
  id         String         @id @default(cuid())
  name       String
  slug       String         @unique
  adminEmail String
  phone      String?
  address    String?
  metadata   Json?          @default("{}") @db.JsonB
  capacity   Int?           @default(0)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @updatedAt
  classrooms Classroom[]
  students   Student[]
  staffs     StaffProfile[]
}

model StaffProfile {
  id         String      @id @default(cuid())
  firstName  String
  lastName   String
  email      String
  phone      String?
  role       StaffRole   @default(TEACHER)
  status     Int         @default(1)
  school     School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId   String
  user       User?       @relation("UserToStaffProfile", fields: [userId], references: [id])
  userId     String?     @unique
  classrooms Classroom[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt

  @@unique([email, schoolId])
  @@index([email])
  @@index([status])
}

model Classroom {
  id        String         @id @default(cuid())
  name      String
  schoolId  String
  capacity  Int?
  status    Int            @default(1)
  school    School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students  Student[]
  staffs    StaffProfile[]
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model Student {
  id          String            @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  schoolId    String
  classroomId String
  school      School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classroom   Classroom         @relation(fields: [classroomId], references: [id])
  guardians   GuardianProfile[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
}

enum InvitationStatus {
  NOT_INVITED
  INVITED
  SIGNED_UP
}

model GuardianProfile {
  id           String           @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  phone        String?
  relationship String?
  status       InvitationStatus @default(NOT_INVITED)
  studentId    String
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user         User?            @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?        @updatedAt

  @@unique([userId, studentId])
  @@index([email])
  @@index([status])
}
