generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  phone         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@index([userId, activeOrganizationId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  students    Student[]
  classrooms  Classroom[]
  Post        Post[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id                String             @id
  organizationId    String
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  role              String
  createdAt         DateTime
  classroomStaff    ClassroomStaff[]
  childrenGuardians ChildrenGuardian[]
  Post              Post[]
  PostAudience      PostAudience[]
  PostComment       PostComment[]
  ReadReceipt       ReadReceipt[]

  @@index([organizationId])
  @@index([userId, organizationId])
  @@map("member")
}

model Invitation {
  id              String       @id
  email           String?
  phone           String?
  name            String?
  role            String
  status          String       @default("pending")
  expiresAt       DateTime
  createdAt       DateTime     @default(now())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviterId       String
  user            User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  studentId       String?
  studentRelation String?

  @@index([organizationId])
  @@index([email, status, expiresAt])
  @@index([phone, status, expiresAt])
  @@map("invitation")
}

model Student {
  id           String    @id @default(uuid())
  name         String
  birthDate    DateTime?
  medicalNotes String?
  active       Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  classroomId      String?
  classroom        Classroom?         @relation(fields: [classroomId], references: [id])
  childrenGuardian ChildrenGuardian[]

  @@index([organizationId])
  @@index([classroomId])
  @@index([active])
  @@map("student")
}

model ClassroomStaff {
  id          String    @id @default(uuid())
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  memberId    String
  member      Member    @relation(fields: [memberId], references: [id])
  role        String?
  createdAt   DateTime

  @@unique([classroomId, memberId])
  @@index([memberId])
  @@map("classroom_staff")
}

model Classroom {
  id         String   @id @default(uuid())
  name       String
  gradeLevel String?
  capacity   Int?
  active     Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  students       Student[]
  classroomStaff ClassroomStaff[]

  @@index([organizationId])
  @@index([organizationId, name])
  @@map("classroom")
}

model ChildrenGuardian {
  id           String   @id @default(uuid())
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  memberId     String?
  member       Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  relationship String
  active       Int      @default(1)
  createdAt    DateTime @default(now())

  @@unique([studentId, memberId])
  @@index([studentId])
  @@map("children_guardian")
}

enum PostType {
  ANNOUNCEMENT
  REMINDER
  NEWSLETTER
  EVENT
  POLL
}

enum PostPriorityLevel {
  URGENT
  HIGH
  NORMAL
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}

// Post Model
model Post {
  id             String            @id @default(uuid())
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
  author         Member            @relation(fields: [authorId], references: [id])
  authorId       String
  content        String
  type           PostType          @default(ANNOUNCEMENT) // ANNOUNCEMENT, REMINDER, NEWSLETTER, etc.
  priority       PostPriorityLevel @default(NORMAL) // URGENT, HIGH, NORMAL
  scheduledAt    DateTime?
  publishedAt    DateTime          @default(now())
  expiresAt      DateTime? // For time-sensitive reminders
  audiences      PostAudience[]
  comments       PostComment[]
  readReceipts   ReadReceipt[]
  isPinned       Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([organizationId])
  @@index([authorId])
  @@index([publishedAt])
  @@map("post")
}

model PostAudience {
  id String @id @default(uuid())

  // Relations
  post     Post    @relation(fields: [postId], references: [id])
  postId   String
  member   Member? @relation(fields: [memberId], references: [id])
  memberId String?

  @@index([postId])
  @@map("post_audience")
}

// Comment Model
model PostComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   Member @relation(fields: [authorId], references: [id])

  @@index([postId])
  @@index([authorId])
  @@map("post_comment")
}

// Read Receipt Model
model ReadReceipt {
  id     String   @id @default(uuid())
  readAt DateTime @default(now())

  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  @@unique([postId, memberId])
  @@index([postId])
  @@index([memberId])
  @@map("read_receipt")
}
